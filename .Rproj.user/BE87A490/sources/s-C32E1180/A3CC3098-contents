library(lme4)
library(effects)
library(emmeans)
library("lme4")
library(ggplot2)
library(tidyr)
library(dplyr)
library("gridExtra")
library("cowplot")
library("grid")
library("ggbeeswarm")
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/diagnostic_fcns.r")
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/glmm_stability.r")
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/drop1_para.r") #drop1.para beh√§lt die contr bei 
Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]
load("baseline.comparison")

xdata=read.table(file="/Users/HannaSchleihauf/Dropbox/Research/Projects/OI/OI_EYE_2/data/behavior.baseline.txt", header=T, sep="\t")

xdata$trial.per.group[xdata$condition == "experimental"] = ave(xdata$id[xdata$condition == "experimental"], list(xdata$id[xdata$condition == "experimental"], xdata$child.adult[xdata$condition == "experimental"], xdata$action.type), FUN=seq_along)
str(xdata)

xdata$box.id = as.factor(xdata$trial)
xdata$action.type = as.factor(xdata$action.type)
xdata$action.type =  relevel(xdata$action.type, ref = "no.contact")
xdata$child.adult = as.factor(xdata$child.adult)
xdata$child.adult =  relevel(xdata$child.adult, ref = "child")
xdata$condition = as.factor(xdata$condition)
xdata$single.id = as.factor(xdata$single.id)
xdata$dyad.id = as.factor(xdata$dyad.id)

xx.fe.re=fe.re.tab(fe.model="oi.score  ~ condition*child.adult + action.type + trial + trial.per.group + box.id",
                   re="(1|dyad.id) + (1|single.id)", data=xdata)
xx.fe.re$summary
t.data=xx.fe.re$data 
str(t.data)

#centering variables included in random slope
t.data$child.adult.code = as.numeric(t.data$child.adult)-mean(as.numeric(t.data$child.adult))
t.data$action.type.code = as.numeric(t.data$action.type.contact)-mean(as.numeric(t.data$action.type.contact))
#t.data$single.id.code = as.numeric(t.data$single.id)  
t.data$z.trial = scale(as.numeric(t.data$trial)) ##trial here is identical with box id
t.data$box.id.2.code = t.data$box.id.2-mean(t.data$box.id.2)
t.data$box.id.3.code = t.data$box.id.3-mean(t.data$box.id.3)
t.data$box.id.4.code = t.data$box.id.4-mean(t.data$box.id.4)

#library("optimx")
contr=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000000))
#contr = glmerControl(optimizer = "optimx", 
#                      optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))

ftable(oi.score ~ condition + child.adult + action.type + box.id , data = t.data)

full1 = glmer(oi.score ~ condition*action.type *child.adult + 
               (1 + action.type.code  || single.id),
             data = t.data, control = contr, family = binomial)
tests=drop1p(model.res=full1, para=F, data=t.data, contr=contr, n.cores=c("all-1", "all"), to.del=NULL)
round(tests$drop1.res, 5)

summary(full1)$varcor
overdisp.test(full1)
ranef.diagn.plot(full1)
xx=lm(oi.score ~ (condition + child.adult + action.type),
      data=t.data)
library("car")
vif(xx)

round(summary(full1)$coefficients, 3)

m.stab.b=glmm.model.stab(model.res=full1, contr=contr, use=c("single.id"))  
m.stab.b$detailed$warnings
xx=as.data.frame(round(m.stab.b$summary[, -1], 3))
m.stab.plot(round(m.stab.b$summary[, -1], 3))
write.table(xx, "baseline.comp.txt",quote=FALSE, sep = "\t")
library("biganalytics")
m.stab.conv = subset(m.stab.b$detailed, m.stab.b$detailed$warnings == "none")
round(colmin(as.big.matrix(m.stab.conv)),3)
round(colmax(as.big.matrix(m.stab.conv)),3)

null=glmer(oi.score ~ 1 + 
                (1 + action.type.code  || single.id),
           data = t.data, control = contr, family = binomial)
anova(full1, null, test="Chisq")

##Reduced model comparison 
full2 = glmer(oi.score ~ condition*action.type + condition*child.adult +
                (1 + action.type.code  || single.id),
              data = t.data, control = contr, family = binomial)
tests=drop1p(model.res=full2, para=F, data=t.data, contr=contr, n.cores=c("all-1", "all"), to.del=NULL)
round(tests$drop1.res, 3)

ftable(oi.score ~ condition + child.adult + action.type, xdata)
aggregate(xdata$oi.score, list(xdata$condition, xdata$child.adult), mean, na.rm = T)
aggregate(xdata$oi.score, list(xdata$condition, xdata$action.type), mean, na.rm = T)
aggregate(xdata$oi.score, list(xdata$condition, xdata$child.adult, xdata$action.type), mean, na.rm = T)


round(summary(full)$coefficients, 3)

plotmodel1 = glmer(oi.score ~ condition*action.type + condition*child.adult.code + 
                     (1 + action.type.code  || single.id),
                   data = t.data, control = contr, family = binomial)
##bootstraps for plotmodel
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/boot_glmm.r")
boot.plot1=boot.glmm.pred(model.res=plotmodel1, excl.warnings=T, nboots=1000, para=F, resol=100, level=0.95, use=c("condition","action.type"))
load("baseline.comparison")

# #Aufteilung nur nach action type
# no.contact = subset(t.data, t.data$action.type == "no.contact")
# contact = subset(t.data, t.data$action.type == "contact")
# 
# res.no.contact = 
#   glmer(oi.score ~ condition + 
#           (1 + z.trial.per.group || single.id),
#         data = no.contact, control = contr, family = binomial)
# tests=drop1p(model.res = res.no.contact, para=F, data=no.contact, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# 
# res.contact = 
#   glmer(oi.score ~ condition + 
#           (1 + z.trial.per.group || single.id),
#         data = contact, control = contr, family = binomial)
# tests=drop1p(model.res = res.contact, para=F, data=contact, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# 
# ##aufteilung nach gruppe (action type and age group)
# no.contact.child = subset(t.data, t.data$action.type == "no.contact" & t.data$child.adult == "child")
# contact.child = subset(t.data, t.data$action.type == "contact" & t.data$child.adult == "child")
# no.contact.adult = subset(t.data, t.data$action.type == "no.contact" & t.data$child.adult == "adult")
# contact.adult = subset(t.data, t.data$action.type == "contact" & t.data$child.adult == "adult")
# 
# hist(xdata$oi.score, list(xdata$condition))
# 
# res.no.contact.child = 
#   glmer(oi.score ~ condition + 
#                (1 + z.trial.per.group || single.id),
#              data = no.contact.child, control = contr, family = binomial)
# tests=drop1p(model.res = res.no.contact.child, para=F, data=no.contact.child, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# 
# fisher.test(no.contact.child$oi.score, no.contact.child$condition)
# chisq.test(table(no.contact.child$oi.score, no.contact.child$condition),correct=TRUE)
# 
# res.contact.child = 
#   glmer(oi.score ~ condition + 
#           (1 + z.trial.per.group || single.id),
#         data = contact.child, control = contr, family = binomial)
# tests=drop1p(model.res = res.contact.child, para=F, data=contact.child, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# summary(res.contact.child)$varcor
# 
# fisher.test(contact.child$oi.score, contact.child$condition)
# chisq.test(table(contact.child$oi.score, contact.child$condition),correct=TRUE)
# 
# res.no.contact.adult = 
#   glmer(oi.score ~ condition + 
#           (1 + z.trial.per.group || single.id),
#         data = no.contact.adult, control = contr, family = binomial)
# tests=drop1p(model.res = res.no.contact.adult, para=F, data=no.contact.adult, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# summary(res.no.contact.adult)$varcor
# ranef.diagn.plot(res.no.contact.adult)
# 
# fisher.test(no.contact.adult$oi.score, no.contact.adult$condition)
# chisq.test(table(no.contact.adult$oi.score, no.contact.adult$condition),correct=TRUE)
# 
# res.contact.adult = 
#   glmer(oi.score ~ condition + 
#           (1 + z.trial.per.group || single.id),
#         data = contact.adult, control = contr, family = binomial)
# tests=drop1p(model.res = res.contact.adult, para=F, data=contact.adult, contr=contr, 
#              n.cores=c("all-1", "all"), to.del=NULL)
# round(tests$drop1.res, 5)
# 
# fisher.test(contact.adult$oi.score, contact.adult$condition)
# chisq.test(table(contact.adult$oi.score, contact.adult$condition),correct=TRUE)

###thats what is reported
emm = emmeans(full2,  ~ condition*action.type)
summary(emm, type = "response")  ##values for plot
#plot(emm, by = "action", intervals = TRUE, type = "response")
emmeans(full2, pairwise ~ condition*action.type)
summary(pairs(emm), type = "response")
summary(pairs(regrid(emm)), type = "response")

emmip(emm, ~ "action", type = "link")
emmip(emm, ~ "action", type = "response")


# org.aov <- aov(full,
#                contrasts = list(condition = "baseline", ))
# org.emml <- emmeans(org.aov, consec ~ day)
# org.emml


###plot
###
dev.off()
boot.res.plot1 = as.data.frame(boot.plot1$ci.predicted)
boot.res.plot1 = boot.res.plot1 %>% arrange(desc(action.type))


round(boot.res.plot1$fitted, 3)
t.data$plot.group = paste(t.data$action.type, t.data$condition, sep = ".")
t.data$plot.group = as.factor(t.data$plot.group)
t.data$plot.group = ordered(t.data$plot.group, 
                            levels = c("no.contact.baseline", "no.contact.experimental", 
                                       "contact.baseline", "contact.experimental" ))
levels(t.data$plot.group)
boot.res.plot1$plot.group = paste(boot.res.plot1$action.type, boot.res.plot1$condition, sep = ".")
#plot child.adult 
t.data$fitted = as.numeric((t.data$oi.score))
str(t.data)
theme_set( theme_gray())  # pre-set the bw theme.
g3 <- ggplot()
g3 <- g3 + geom_jitter(data = t.data, aes(x = plot.group, y = fitted, colour = action.type),
                       width = 0.40, height = 0.025, alpha = 0.3)
g3 <- g3 + geom_errorbar(aes(x=c("contact.baseline", "contact.experimental"), 
                             ymin=c(boot.res.plot1$lower.cl[boot.res.plot1$action.type == "contact"]),
                             ymax=c(boot.res.plot1$upper.cl[boot.res.plot1$action.type == "contact"])),
                         width=.125, colour="springgreen4",
                         position=position_dodge(0.9))
g3 <- g3 + geom_errorbar(aes(x=c("no.contact.baseline", "no.contact.experimental"), 
                             ymin=c(boot.res.plot1$lower.cl[boot.res.plot1$action.type == "no.contact"]),
                             ymax=c(boot.res.plot1$upper.cl[boot.res.plot1$action.type == "no.contact"])),
                         width=.125, colour="red4",
                         position=position_dodge(0.9))
g3 <- g3 + geom_crossbar(aes(x=c("no.contact.baseline", "no.contact.experimental", 
                                 "contact.baseline", "contact.experimental"), 
                             y = boot.res.plot1$fitted, 
                             ymin= boot.res.plot1$fitted,
                             ymax= boot.res.plot1$fitted), 
                         width=0.5, colour= c("red4", "red4", "springgreen4", "springgreen4"))
g3 = g3 +  labs(subtitle="Interaction Effect of Condition * Action Type", 
       y="Probability to Over-imitate", 
       x=element_blank(), 
       title="Analysis 1: Behavioral Analysis -\nBaseline Comparison")
g3 = g3 + scale_y_continuous(labels = scales::percent_format(accuracy = 1))
g3 = g3 + theme(legend.title = element_blank(),
                axis.text.x = element_text(size = 8, face=NULL, 
                                           margin = margin(t = 1, r = 0, b = 1, l = 0, 
                                                           unit = "mm")), 
                axis.text.y = element_text(size = 8, face=NULL,
                                           margin = margin(t = 0, r = 1, b = 0, l = 1, 
                                                           unit = "mm")),
                axis.title.x = element_text(size = 10, face=NULL,
                                            margin = margin(t = 1.5, r = 1, b = 0, l = 0, 
                                                            unit = "mm")),
                axis.title.y = element_text(size = 10, face=NULL,
                                            margin = margin(t = 1.5, r = 0, b = 0, l = 0, 
                                                            unit = "mm")))
g3 = g3 + scale_x_discrete(labels=c("NC\nbaseline", 
                                    "NC\nexperimental", 
                                    "PI\nbaseline", 
                                    "PI\nexperimental"))
g3 = g3 + scale_color_manual(values = c("#43CD80", "#EE2C2C"), labels = c("PI", "NC"))
g3



