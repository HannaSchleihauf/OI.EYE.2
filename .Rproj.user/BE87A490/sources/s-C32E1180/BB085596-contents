library(lme4)
library(effects)
library(emmeans)
library("GGally")
library("reshape2")
library("compiler")
library("parallel")
library("boot")
library("lattice")
library("lme4")
library(ggplot2)
library(tidyr)
library(dplyr)
library("gridExtra")
library("cowplot")
library("grid")
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/diagnostic_fcns.r")
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/glmm_stability.r")
Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]

xdata=read.table(file="/Users/HannaSchleihauf/Dropbox/Research/Projects/OI/OI_EYE_2/data/Variables.complete.txt", header=T, sep="\t")

str(xdata)
xdata$prop.time = xdata$aoi.time/xdata$time.fixations.screen
range(xdata$prop.time, na.rm = T)
xdata$prop.time[is.na(xdata$prop.time)] <- 0
xdata$aoi = as.factor(xdata$aoi)
xdata$child.adult = as.factor(xdata$child.adult)
xdata$box = as.factor(xdata$box)
xdata$trial.overall = as.numeric(as.factor(paste(xdata$box, xdata$trial, sep = ".")))

##creating a data frame with only NC and PI
xxdata = subset(xdata, aoi == "face" & (action == "PI" | action == "NC") & trial == 1)
str(xxdata)

##
##
xx.fe.re=fe.re.tab(fe.model="behavior ~ prop.time*action*child.adult + box + trial.overall",
                   re="(1|dyad.id) + (1|single.id)", data=xxdata)
#time.screen only added that I have in in t.data
xx.fe.re$summary
t.data=xx.fe.re$data 
str(t.data)

#centering variables included in random slope
t.data$child.adult.code = as.numeric(t.data$child.adult)-mean(as.numeric(t.data$child.adult))
t.data$z.prop.time = scale(t.data$prop.time)
t.data$action.PI.code = t.data$action.PI-mean(t.data$action.PI)
t.data$single.id.code = as.numeric(t.data$single.id)
t.data$z.box = scale(as.numeric(t.data$box))

##starting with the model  ##soll trial nur control variable sein? --> Ja!
##formualte full model

contr = glmerControl(optimizer = "optimx", #calc.derivs = FALSE,
                     optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))

contr=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=10000000))
full = glmer(behavior ~ (z.prop.time + action + child.adult)^2 + 
               (1 + action.PI.code + z.prop.time || single.id.code) +
               (1 + child.adult.code || dyad.id),
             data = t.data, control = contr, family = binomial)

summary(full)$varcor
ranef.diagn.plot(full)

#look at the fixed effects
round(summary(full)$coefficients, 3)

## checking absence of overdispersion
overdisp.test(full) #underdispersed

##check for colliniarity
xx=lm(behavior ~ z.prop.time + action + child.adult,
      data=t.data)
library("car")
vif(xx)

## checking model stability
m.stab.b=glmm.model.stab(model.res=full, contr=contr, use=c("single.id.code"))  
m.stab.b$detailed$warnings
xx=as.data.frame(round(m.stab.b$summary[, -1], 3))
m.stab.plot(round(m.stab.b$summary[, -1], 3))
write.table(xx, "OI_EYE2_behavior.stab.txt",quote=FALSE, sep = "\t")


#Null model comparison to see whether the all predictors taken together explain more of the variance than the intercept alone
null=glmer(behavior ~ 1 +
             (1 + action.PI.code + z.prop.time || single.id.code) +
             (1 + child.adult.code || dyad.id),
           data = t.data, control = contr, family = binomial)
anova(full, null, test="Chisq")

##Reduced model comparison 
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/drop1_para.r") #drop1.para beh√§lt die contr bei 
tests=drop1p(model.res=full, para=F, data=t.data, contr=contr, n.cores=c("all-1", "all"), to.del=NULL)
round(tests$drop1.res, 3)

full2 = glmer(behavior ~ (z.prop.time + action + child.adult)^2 + 
               (1 + action.PI.code*z.prop.time || single.id.code) +
               (1 + child.adult.code || dyad.id),
             data = t.data, control = contr, family = binomial)

full2 = glmer(behavior ~ (z.prop.time + action + child.adult) + 
                (1 + action.PI.code*z.prop.time ||single.id.code) +
                (1 | dyad.id),
              data = t.data, control = contr, family = binomial)
tests=drop1p(model.res=full2, para=F, data=t.data, contr=contr, n.cores=c("all-1", "all"), to.del=NULL)
round(tests$drop1.res, 3)

full3 = glmer(behavior ~ (z.prop.time.mean + action + child.adult) + 
                (1 + action.PI.code + z.prop.time.mean || single.id.code) +
                (1 + child.adult.code || dyad.id),
              data = t.data, control = contr, family = binomial)
tests=drop1p(model.res=full3, para=F, data=t.data, contr=contr, n.cores=c("all-1", "all"), to.del=NULL)
round(tests$drop1.res, 3)

####Plots
##bootstraps for plotmodel
source("/Users/HannaSchleihauf/Dropbox/Research/EVAClass/Functions/boot_glmm.r")
#boot.plot1=boot.glmm.pred(model.res=full, excl.warnings=T, nboots=1000, para=F, resol=100, level=0.95, use=c("z.prop.time.mean", "action", "child.adult"))
#save.image("plots_behavior")
#
#
#PLOT 1: interaction time*action
summary(full)$coefficients[,1]
#save coefficent values, so we can use them in an equation 
# save the coefficient values so we can use them in the equations
b0 = summary(full)$coefficients[1,1]# intercept
Xztime = summary(full)$coefficients[2,1]
XactionPI = summary(full)$coefficients[3,1]
Xadult  = summary(full)$coefficients[4,1]
XztimeXactionPI = summary(full)$coefficients[5,1]
XztimeXadult  = summary(full)$coefficients[6,1]
XactionPIXadult  = summary(full)$coefficients[7,1]
XztimeXactionPIXadult  = summary(full)$coefficients[8,1]

Xtime_range <- seq(from=min(t.data$z.prop.time.mean), to=max(t.data$z.prop.time.mean), length.out = 100)
range(Xtime_range)

NC_logits_child <- b0 + 
  Xztime*Xtime_range + 
  XactionPI*0 + 
  Xadult*0 +
  XztimeXactionPI*0 + 
  XztimeXadult*0 + # the reference group
  XactionPIXadult*0 +
  XztimeXactionPIXadult*0

PI_logits_child <- b0 + 
  Xztime*Xtime_range + 
  XactionPI*1 + 
  Xadult*0 +
  XztimeXactionPI*Xtime_range + 
  XztimeXadult*0 + # the reference group
  XactionPIXadult*0 + 
  XztimeXactionPIXadult*0

NC_logits_adult <- b0 + 
  Xztime*Xtime_range + 
  XactionPI*0 + 
  Xadult*1 +
  XztimeXactionPI*0 + 
  XztimeXadult*Xtime_range + # the reference group
  XactionPIXadult*0 + 
  XztimeXactionPIXadult*0

PI_logits_adult <- b0 + 
  Xztime*Xtime_range + 
  XactionPI*1 + 
  Xadult*1 +
  XztimeXactionPI*Xtime_range + 
  XztimeXadult*Xtime_range + # the reference group
  XactionPIXadult*1 + 
  XztimeXactionPIXadult*Xtime_range


# Compute the probibilities (this is what will actually get plotted):
NC_probs_child <- plogis(NC_logits_child)
PI_probs_child <- plogis(PI_logits_child)
NC_probs_adult <- plogis(NC_logits_adult)
PI_probs_adult <- plogis(PI_logits_adult)

plot.data <- data.frame(NC_child=NC_probs_child, PI_child=PI_probs_child, 
                        NC_adult=NC_probs_adult, PI_adult=PI_probs_adult, time=Xtime_range)
plot.data <- gather(plot.data, key=group, value=prob, c("NC_child", "PI_child", "NC_adult", "PI_adult"))
str(plot.data)

plot.data.NC.child <- subset(plot.data, plot.data$group == "NC_child")
plot.data.PI.child <- subset(plot.data, plot.data$group == "PI_child")
plot.data.NC.adult <- subset(plot.data, plot.data$group == "NC_adult")
plot.data.PI.adult <- subset(plot.data, plot.data$group == "PI_adult")

NC.data.child = subset(t.data, t.data$action == "NC" & t.data$child.adult == "child")
PI.data.child = subset(t.data, t.data$action == "PI" & t.data$child.adult == "child")
NC.data.adult = subset(t.data, t.data$action == "NC" & t.data$child.adult == "parent")
PI.data.adult = subset(t.data, t.data$action == "PI" & t.data$child.adult == "parent")

##to get a feeling how it looks like
plot(NC.data.child$prop.time, NC.data.child$behavior)
plot(PI.data.child$prop.time, PI.data.child$behavior)
plot(NC.data.adult$prop.time, NC.data.adult$behavior)
plot(PI.data.adult$prop.time, PI.data.adult$behavior)

boot.res.plot=as.data.frame(boot.plot1$ci.predicted)
boot.res.plot.NC.child = subset(boot.res.plot, boot.res.plot$action == "NC" & 
                                  boot.res.plot$child.adult == "child")
boot.res.plot.PI.child = subset(boot.res.plot, boot.res.plot$action == "PI" & 
                                  boot.res.plot$child.adult == "child")
boot.res.plot.NC.adult = subset(boot.res.plot, boot.res.plot$action == "NC" & 
                                  boot.res.plot$child.adult == "parent")
boot.res.plot.PI.adult = subset(boot.res.plot, boot.res.plot$action == "PI" & 
                                  boot.res.plot$child.adult == "parent")
boot.res.plot.NC.child$xvals <- 
  seq(from=min(t.data$z.prop.time), to=max(t.data$z.prop.time), length.out = 100)
boot.res.plot.PI.child$xvals <- 
  seq(from=min(t.data$z.prop.time), to=max(t.data$z.prop.time), length.out = 100)
boot.res.plot.NC.adult$xvals <- 
  seq(from=min(t.data$z.prop.time), to=max(t.data$z.prop.time), length.out = 100)
boot.res.plot.PI.adult$xvals <- 
  seq(from=min(t.data$z.prop.time), to=max(t.data$z.prop.time), length.out = 100)

##y axis labels
range(t.data$prop.time.mean)
percentage.labels= c("0%", "10%", "20%", "30%", "40%", "50%", "600%", "70%", "80%")
percentage.comma = seq(from = 0, to = 0.8, length.out = 9)
##and a vector in z-space at which they need to be displayed
percentage.ticks=
  (percentage.comma - mean(t.data$prop.time.mean))/
  sd(t.data$prop.time.mean)

dev.off()
library(ggplot2)
#NC_child Plot
theme_set( theme_gray())  # pre-set the bw theme.
g1 <- ggplot()
g1 <- g1 + geom_jitter(data = NC.data.child , aes(x = z.prop.time.mean, y = behavior), 
                       width = 0.025, height = 0.025, alpha = 0.3)
g1 = g1 + geom_ribbon(data=boot.res.plot.NC.child,
                      aes(x = xvals,
                          ymin = lower.cl,
                          ymax = upper.cl),
                      alpha = 0.5,
                      fill="grey50")
g1 = g1 + geom_line(data=plot.data.NC.child, 
                    aes(x=time, y=prob), colour="grey40", lwd=1)
#g1 = g1 + geom_line(data=boot.res.plot.NC.child, 
#                   aes(x=xvals, y=fitted), colour="grey40", lwd=1)
g1 = g1 +  xlab("percentage of looking time into the face")
g1 = g1 +  ylab("probability to over-imitate")
g1 = g1 +  ggtitle("children - no-contact action")
g1 = g1 +  scale_x_continuous(breaks = percentage.ticks, 
                              labels =  percentage.labels)
g1 = g1 + scale_y_continuous(labels = scales::percent_format(accuracy = 1))

#PI_child Plot
theme_set( theme_gray())  # pre-set the bw theme.
g2 <- ggplot()
g2 <- g2 + geom_jitter(data = PI.data.child, aes(x = z.prop.time.mean, y = behavior), 
                       width = 0.025, height = 0.025, alpha = 0.3)
g2 = g2 + geom_ribbon(data=boot.res.plot.PI.child,
                      aes(x = xvals,
                          ymin = lower.cl,
                          ymax = upper.cl),
                      alpha = 0.5,
                      fill="grey50")
g2 = g2 + geom_line(data=plot.data.PI.child, 
                    aes(x=time, y=prob), colour="grey40", lwd=1)
g2 = g2 +  xlab("percentage of looking time into the face")
g2 = g2 +  ylab("probability to over-imitate")
g2 = g2 +  ggtitle("children - pseudo-instrumental action")
g2 = g2 +  scale_x_continuous(breaks = percentage.ticks, 
                              labels =  percentage.labels)
g2 = g2 + scale_y_continuous(labels = scales::percent_format(accuracy = 1))


#NC_adult Plot
theme_set( theme_gray())  # pre-set the bw theme.
g3 <- ggplot()
g3 <- g3 + geom_jitter(data = NC.data.adult , aes(x = z.prop.time.mean, y = behavior), 
                       width = 0.025, height = 0.025, alpha = 0.3)
g3 = g3 + geom_ribbon(data=boot.res.plot.NC.adult,
                      aes(x = xvals,
                          ymin = lower.cl,
                          ymax = upper.cl),
                      alpha = 0.5,
                      fill="grey50")
g3 = g3 + geom_line(data=plot.data.NC.adult, 
                    aes(x=time, y=prob), colour="grey40", lwd=1)
#g3 = g3 + geom_line(data=boot.res.plot.NC.adult, 
#                    aes(x=xvals, y=fitted), colour="grey40", lwd=1)
g3 = g3 +  xlab("percentage of looking time into the face")
g3 = g3 +  ylab("probability to over-imitate")
g3 = g3 +  ggtitle("adults - no-contact action")
g3 = g3 +  scale_x_continuous(breaks = percentage.ticks, 
                              labels =  percentage.labels)
g3 = g3 + scale_y_continuous(labels = scales::percent_format(accuracy = 1))


#PI_adult Plot
theme_set( theme_gray())  # pre-set the bw theme.
g4 <- ggplot()
g4 <- g4 + geom_jitter(data = PI.data.adult, aes(x = z.prop.time.mean, y = behavior), 
                       width = 0.025, height = 0.025, alpha = 0.3)
table(PI.data.adult$behavior)

g4 = g4 + geom_ribbon(data=boot.res.plot.PI.adult,
                      aes(x = xvals,
                          ymin = lower.cl,
                          ymax = upper.cl),
                      alpha = 0.5,
                      fill="grey50")
g4 = g4 + geom_line(data=plot.data.PI.adult, 
                    aes(x=time, y=prob), colour="grey40", lwd=1)
g4 = g4 + geom_line(data=boot.res.plot.PI.adult, 
                    aes(x=xvals, y=fitted), colour="grey40", lwd=1)
g4 = g4 +  xlab("percentage of looking time into the face")
g4 = g4 +  ylab("probability to over-imitate")
g4 = g4 +  ggtitle("adults - pseudo-instrumental action")
g4 = g4 +  scale_x_continuous(breaks = percentage.ticks, 
                              labels =  percentage.labels)
g4 = g4 + scale_y_continuous(labels = scales::percent_format(accuracy = 1))


plot_grid(g1, g2, g3, g4, align = "h", nrow = 2, ncol = 2) #labels = c("A", "B", "C"), axis = "b", 
